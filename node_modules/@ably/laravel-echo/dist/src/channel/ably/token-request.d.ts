export declare class SequentialAuthTokenRequestExecuter {
    cachedToken: string;
    queue: TaskQueue;
    requestTokenFn: Function;
    constructor(token: string, requestTokenFn: Function);
    execute: (tokenRequestFn: Function) => Promise<{
        token: string;
        info: any;
    }>;
    request: (channelName: string) => Promise<{
        token: string;
        info: any;
    }>;
}
type Task = Function;
declare class TaskQueue {
    total: Number;
    todo: Array<Task>;
    running: Array<Task>;
    count: Number;
    constructor(tasks?: Array<Task>, concurrentCount?: number);
    canRunNext: () => number;
    run: (task: Task) => Promise<void>;
}
export {};
